#include "gdt.h"
#include "screen.h"
SegmentDescriptor gdt[GDT_COUNT];
GdtToc gdtToc;
void setSegmentDescriptor(GdtIndex index, unsigned int limit, ADDRESS base, unsigned int ar){
	SegmentDescriptor *sd = &gdt[index];
	/*
	if(limit > 0xfffff){
		ar |= 0x8000;
		limit /= 0x1000;
	}
	*/
	sd->limit_low = limit & 0xffff;
	sd->base_low = base & 0xffff;
	sd->base_mid = (base >> 16) & 0xff;
	sd->access_right = ar & 0xff;
	sd->limit_high = ((limit >> 16) & 0x0f) | ((ar >> 8) & 0xf0);
	sd->base_high = (base >> 24) & 0xff;
	return;
}

void* getBaseAddressFromSegmentDescriptor(GdtIndex index){
	SegmentDescriptor *sd = &gdt[index];
	unsigned int result = ((ADDRESS)sd->base_low | ((ADDRESS)sd->base_mid << 16) | ((ADDRESS)sd->base_high << 24));
	return (void*)result;
}


long long getLimitFromSegmentDescriptor(GdtIndex index){
	SegmentDescriptor *sd = &gdt[index];
	long long result = (sd->limit_low & 0xffff) | ((sd->limit_high & 0x0f) << 16);
	return result;
}

/*
	現在使われていないGDTを取得します。
	戻り値が0の場合はエラー
*/
GdtIndex getEmptySegmentDescriptorIndex(){
	int i = 0;
	for(i = 1; i < GDT_COUNT; i++){
		if(getLimitFromSegmentDescriptor(i) == 0){
			return i;
		}
	}
	return 0;
}
void initGdt(void){
	int i;
	for(i = 0; i < GDT_COUNT; i++){
		setSegmentDescriptor(i, 0, 0, 0);
	}
	setSegmentDescriptor(1, 0xfffff, 0, 0x409a | 0x8000);
	setSegmentDescriptor(2, 0xfffff, 0, 0x4092 | 0x8000);
	
	gdtToc.baseAddress = gdt;
	gdtToc.gdtSize = sizeof(gdt[0]) * GDT_COUNT;
	
	cli();
	__asm__ __volatile__ ( "pusha" );
	__asm__ __volatile__ ( "lgdt gdtToc");
	__asm__ __volatile__ ( "popa" );
	
	
}